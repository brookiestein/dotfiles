" =======================================
" Vundle
" =======================================
" Set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" instructions:
" Brief help
" :PluginList- lists configured plugins
" :PluginInstall- installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean- confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

Plugin 'VundleVim/Vundle.vim' " Manage plugins
Plugin 'scrooloose/nerdtree' " Project and file navigation
Plugin 'Xuyuanp/nerdtree-git-plugin' " NerdTree git functionality
Plugin 'ryanoasis/vim-devicons' " Dev Icons
Plugin 'vim-airline/vim-airline-themes' " Themes for airline
Plugin 'tpope/vim-surround'
Plugin 'flazz/vim-colorschemes' " Support for coloschemes
Plugin 'majutsushi/tagbar' " Class/module browser
Plugin 'vim-ctrlspace/vim-ctrlspace' " Tabs/Buffers/Fuzzy/Workspaces/Bookmarks
Plugin 'mileszs/ack.vim' " Ag/Grep
Plugin 'fisadev/FixedTaskList.vim' " Pending tasks list
Plugin 'ervandew/supertab' " More functions for tabs
Plugin 'thaerkh/vim-indentguides' " Visual representation of indents
Plugin 'tpope/vim-commentary' " Support for multifunctionality in comments
Plugin 'rust-lang/rust.vim' "Support for Rust Lang
Plugin 'mhinz/vim-startify' "When start only without specific file represents a beautiful text ascii ;-)
Plugin 'itchyny/lightline.vim'
" Themes
Plugin 'ayu-theme/ayu-vim'
Plugin 'connorholyday/vim-snazzy'

" All of your Plugins must be added before the following line
call vundle#end() " required
filetype plugin indent on

" General configurations
" ========================
" Encode
" ========================
set encoding=utf8

" =======================================
" Line numbers, rows, columns and more...
" ========================================
set number
set ruler
set cursorline! " shows line under the cursor's line
set showmatch " shows matching part of bracket pairs (), [], {}
set nocompatible " no compatible with vi setting, only vim:

" ========================
" Indent
" ========================
set tabstop=8
set shiftwidth=8
set smarttab " set tabs for a shifttabs logic
set expandtab " expand tabs into spaces
set autoindent " indent when moving to the next line while writing code
set cindent

" ======================
" Required by ctrl-space
" ======================
set hidden

" ======================
" Required by Vundle
" ======================
filetype off

" =========================
" Colors, theme and syntax
" =========================
syntax on
syntax enable " enable syntax highlighting
let base16colorspace=256
set t_Co=256 " 256 colors
let ayucolor="dark" " for dark version of theme
"let ayucolor="mirage" " for mirage version of theme
"let ayucolor="light"
colorscheme ayu
set background=dark
set termguicolors " enable true colors support
"let g:airline_theme='sitruuna' " set airline theme
" Transparency
"hi! Normal ctermbg=NONE guibg=NONE

" ============================
" Settings for shell
" ============================
set shell=/bin/bash " This is optional
set ttyfast " Terminal acceleration

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
set cmdheight=1
set whichwrap+=<,>,h,l
set lazyredraw " Don't redraw while executing macros (good performance config)
set magic " For regular expressions turn magic on
" No annoying sound on errors
"set noerrorbells
"set novisualbell
"set t_vb=
"set tm=500
set ffs=unix,dos,mac " Use Unix as the standard file type

" ============================
" Files, backups, undo and others related config
" ============================
set nobackup " No backup files
set nowritebackup " Only in case you don't want a backup file while editing
set noswapfile " No swap files
set clipboard=unnamed " Use system clipboard
set exrc " Enable usage of additional .vimrc files from working directory
set secure " Prohibit .vimrc files to execute shell, create files, etc.
set autoread " Set to auto read when a file is changed from the outside
au FocusGained,BufEnter * checktime
" Fast saving
nmap <leader>w :w!<cr>
" Ignore compiled files
set wildignore=*.o,*~,*.pyc,*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store

set backspace=indent,eol,start " Backspace removes all (indents, EOLs, start) What is start?
set scrolloff=20 " Let 20 lines before/after cursor during scroll with j/k

" Search settings
set incsearch " Makes search act like search in modern browsers
set hlsearch " Highlight search results
set ignorecase " Ignore case when searching
set smartcase " When searching try to be smart about cases 

" ===============================
" History settings
" ===============================
" Sets how many lines of history VIM has to remember
set history=500
" Linebreak on 500 characters
set lbr
set tw=500

" ================================
" Mappings
" ================================
" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
map <leader>t<leader> :tabnext
" Let 'tl' toggle between this and the last accessed tab
let g:lasttab = 1
nmap <Leader>tl :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()
" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2
" Format the status line
"set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l\ \ Column:\ %c

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm
" Quickly open a buffer for scribble
map <leader>q :e ~/buffer<cr>
" Quickly open a markdown buffer for scribble
map <leader>x :e ~/buffer.md<cr>
" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => lightline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:lightline = {
      \ 'colorscheme': 'snazzy',
      \ 'active': {
      \   'left': [ ['mode', 'paste'],
      \             ['fugitive', 'readonly', 'filename', 'modified'] ],
      \   'right': [ [ 'lineinfo' ], ['percent'] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&filetype=="help"?"":&readonly?"ðŸ”’":""}',
      \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
      \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
      \ },
      \ 'component_visible_condition': {
      \   'readonly': '(&filetype!="help"&& &readonly)',
      \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
      \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
      \ },
      \ 'separator': { 'left': ' ', 'right': ' ' },
      \ 'subseparator': { 'left': ' ', 'right': ' ' }
      \ }

"=====================================================
"" AirLine settings
"=====================================================
"let g:airline#extensions#tabline#enabled=1
"let g:airline#extensions#tabline#formatter='unique_tail'
"let g:airline_powerline_fonts=1

"=====================================================
"" Tabs / Buffers settings
"=====================================================
tab sball
set switchbuf=useopen
set laststatus=2
nmap <F9> :bprev<CR>
nmap <F10> :bnext<CR>
nmap <silent> <leader>q :SyntasticCheck # <CR> :bp <BAR> bd #<CR>
vmap <Tab> >
vmap <S-Tab> <

"=====================================================
"" NERDTree settings
"=====================================================
let g:NERDTreeChDirMode=2
let g:NERDTreeIgnore=['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__']
let g:NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
let g:NERDTreeShowBookmarks=1
let g:nerdtree_tabs_focus_on_files=1
let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'
let g:NERDTreeWinSize = 30
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite
nnoremap <silent> <F2> :NERDTreeFind<CR>
nnoremap <silent> <F3> :NERDTreeToggle<CR>
autocmd BufWritePost * if !argc() | NERDTreeFocus | execute 'normal R' | wincmd p | endif

"=====================================================
"" DevIcon Settings
"=====================================================
" loading the plugin
let g:webdevicons_enable = 1

" adding the flags to NERDTree
let g:webdevicons_enable_nerdtree = 1

" adding to vim-airline's tabline
let g:webdevicons_enable_airline_tabline = 1

" adding to vim-airline's statusline
let g:webdevicons_enable_airline_statusline = 1

" turn on/off file node glyph decorations (not particularly useful)
let g:WebDevIconsUnicodeDecorateFileNodes = 1

" use double-width(1) or single-width(0) glyphs
" only manipulates padding, has no effect on terminal or set(guifont) font
let g:WebDevIconsUnicodeGlyphDoubleWidth = 1

" whether or not to show the nerdtree brackets around flags
let g:webdevicons_conceal_nerdtree_brackets = 0

" the amount of space to use after the glyph character (default ' ')
let g:WebDevIconsNerdTreeAfterGlyphPadding = ''

" Force extra padding in NERDTree so that the filetype icons line up vertically
let g:WebDevIconsNerdTreeGitPluginForceVAlign =0

" change the default character when no match found
let g:WebDevIconsUnicodeDecorateFileNodesDefaultSymbol = 'Æ›'

" set a byte character marker (BOM) utf-8 symbol when retrieving file encoding
" disabled by default with no value
let g:WebDevIconsUnicodeByteOrderMarkerDefaultSymbol = 'îŠ‡'

" enable folder/directory glyph flag (disabled by default with 0)
let g:WebDevIconsUnicodeDecorateFolderNodes = 1

" enable open and close folder/directory glyph flags (disabled by default with 0)
let g:DevIconsEnableFoldersOpenClose = 1

" enable pattern matching glyphs on folder/directory (enabled by default with 1)
let g:DevIconsEnableFolderPatternMatching = 1

" enable file extension pattern matching glyphs on folder/directory (disabled by default with 0)
let g:DevIconsEnableFolderExtensionPatternMatching = 0

"=====================================================
"" Indent Guides Settings
"=====================================================
set listchars=tab:â€º\ ,trail:â€¢,extends:#,nbsp:.

" Settings for lang
"=====================================================
" Rust config
"=====================================================
let g:rust_clip_command = 'xclip -selection clipboard'

"=====================================================
" C/C++ config
"=====================================================
autocmd FileType c setlocal tabstop=8 shiftwidth=8 expandtab
autocmd FileType cpp setlocal tabstop=8 shiftwidth=8 expandtab

"=====================================================
" Jedi
"=====================================================
augroup vimrc-python
  autocmd!
  autocmd FileType python setlocal expandtab shiftwidth=8 tabstop=8 colorcolumn=79
      \ formatoptions+=croq softtabstop=4
      \ cinwords=if,elif,else,for,while,try,except,finally,def,class,with
augroup END

let g:pymode_rope = 0

" jedi-vim
let g:jedi#popup_on_dot = 0
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_definitions_command = "<leader>d"
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>n"
let g:jedi#rename_command = "<leader>r"
let g:jedi#show_call_signatures = "0"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#smart_auto_mappings = 0

" Syntastic
let g:syntastic_python_checkers=['python', 'flake8']

" vim-airline
let g:airline#extensions#virtualenv#enabled = 1

" Syntax highlight
" Default highlight is better than polyglot
let g:polyglot_disabled = ['python']
let python_highlight_all = 1

"=====================================================
"" TagBar settings
"=====================================================
let g:tagbar_autofocus=0
let g:tagbar_width=29
nmap <silent> <F4> :TagbarToggle<CR>

"autocmd BufEnter *.py :call tagbar#autoopen(0)
"nmap <F8> :TagbarToggle<CR>
"autocmd BufWinLeave *.py :TagbarClose
"au CompleteDone * pclose
"autocmd BufNew * if &previewwindow | setlocal nobuflisted | endif

"=====================================================
"" startify
"=====================================================
let g:startify_custom_header = [
            \ '888                          888      888888b.                            888      d8b          ',
            \ '888                          888      888  "88b                           888      Y8P          ',
            \ '888                          888      888  .88P                           888                   ',
            \ '888      .d88b.  888d888 .d88888      8888888K.  888d888 .d88b.   .d88b.  888  888 888  .d88b.  ',
            \ '888     d88""88b 888P"  d88" 888      888  "Y88b 888P"  d88""88b d88""88b 888 .88P 888 d8P  Y8b ',
            \ '888     888  888 888    888  888      888    888 888    888  888 888  888 888888K  888 88888888 ',
            \ '888     Y88..88P 888    Y88b 888      888   d88P 888    Y88..88P Y88..88P 888 "88b 888 Y8b.     ',
            \ '88888888 "Y88P"  888     "Y88888      8888888P"  888     "Y88P"   "Y88P"  888  888 888  "Y8888  ',
            \ '                                                                                                ',
            \ '                                                                                                ',
            \ '                                                                                                ',
            \ '                  El Ã©xito llega cuando tus sueÃ±os son mÃ¡s grandes que tus excusas.',
\]

