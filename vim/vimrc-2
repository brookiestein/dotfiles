"                                 ___·····
"        ___        ___          /__/\····
"       /__/\      /  /\        |  |::\···
"       \  \:\    /  /:/        |  |:|:\··
"        \  \:\  /__/::\      __|__|:|\:\·
"    ___  \__\:\ \__\/\:\__  /__/::::| \:\
"   /__/\ |  |:|    \  \:\/\ \  \:\~~\__\/
"   \  \:\|  |:|     \__\::/  \  \:\······
"    \  \:\__|:|     /__/:/    \  \:\·····
"     \__\::::/      \__\/      \  \:\····
"         ~~~~                   \__\/····

set nocompatible " be iMproved, required
filetype off" required
set hidden
set showtabline=0

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}
Plugin 'scrooloose/nerdtree' " Project and file navigation
Plugin 'Xuyuanp/nerdtree-git-plugin' " NerdTree git functionality

Plugin 'ryanoasis/vim-devicons' " Dev Icons
Plugin 'vim-airline/vim-airline-themes' " Themes for airline
Plugin 'tpope/vim-surround'
Plugin 'flazz/vim-colorschemes'
Plugin 'majutsushi/tagbar' " Class/module browser
Plugin 'kien/rainbow_parentheses.vim'
Plugin 'Raimondi/delimitMate'
Plugin 'vim-ctrlspace/vim-ctrlspace' " Tabs/Buffers/Fuzzy/Workspaces/Bookmarks
Plugin 'mileszs/ack.vim'                    " Ag/Grep
Plugin 'fisadev/FixedTaskList.vim'          " Pending tasks list
Plugin 'MattesGroeger/vim-bookmarks'        " Bookmarks
Plugin 'ervandew/supertab'
Plugin 'BufOnly.vim'


Plugin 'thaerkh/vim-indentguides' " Visual representation of indents

" Rust para mi amigo omar =D
Plugin 'rust-lang/rust.vim'
" Me lo copie de omar
Plugin 'mhinz/vim-startify'

" html for vanilla
Plugin 'mattn/emmet-vim'

"themes
Plugin 'chriskempson/base16-vim'
Plugin 'szorfein/fromthehell.vim'
Plugin 'drewtempelmeyer/palenight.vim'
Plugin 'nightsense/cosmic_latte'
Plugin 'cseelus/vim-colors-tone'
Plugin 'szorfein/fantasy.vim'
Plugin 'ayu-theme/ayu-vim'

" the best Theme Edition
Plugin 'caksoylar/vim-mysticaltutor'
Plugin 'Nequo/vim-allomancer'
Plugin 'connorholyday/vim-snazzy'
Plugin 'KKPMW/oldbook-vim'
Plugin 'dylanaraps/wal.vim'

" plugin LatexPlugin
Plugin 'xuhdev/vim-latex-live-preview'
Plugin 'brennier/quicktex'
" All of your Plugins must be added before the following line
call vundle#end() " required
filetype on
filetype plugin indent on " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList- lists configured plugins
" :PluginInstall- installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean- confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

"=====================================================
"" General settings
"=====================================================
if filereadable(expand("~/.vimrc_background"))
source ~/.vimrc_background
endif
set encoding=utf-8
set fillchars+=vert:\▌
let base16colorspace=256
set t_Co=256 " 256 colors
"set guifont=monokai\ Nerd\ Font\ 18
"colorscheme apprentice" set vim colorscheme
"colorscheme crayon
"colorscheme dzo
"colorscheme elrodeo
"colorscheme palenight
"let g:palenight_terminal_italics=1
"colorscheme dracula
"let g:srcery_italic = 1
"colorscheme fantasy
"colorscheme srcery
"set background=dark
"colorscheme cosmic_latte
"colorscheme tone
"colorscheme fromthehell
"colorscheme wal
colorscheme mysticaltutor
"colorscheme allomancer
"colorscheme snazzy
"colorscheme oldbook
set termguicolors " enable true colors support
"let ayucolor="dark" " for dark version of theme
"let ayucolor="mirage" " for mirage version of theme
"let ayucolor="light"
"colorscheme ayu
let g:airline_theme='cosmic_latte_dark' " set airline theme
syntax enable " enable syntax highlighting

set pyxversion=0
let g:loaded_python_provider = 1
set shell=/bin/zsh
set number " show line numbers
set ruler
set ttyfast " terminal acceleration

set tabstop=4 " 4 whitespaces for tabs visual presentation
set shiftwidth=4 " shift lines by 4 spaces
set smarttab " set tabs for a shifttabs logic
set expandtab " expand tabs into spaces
set autoindent " indent when moving to the next line while writing code

set cursorline! " shows line under the cursor's line
set showmatch " shows matching part of bracket pairs (), [], {}

set enc=utf-8 " utf-8 by default

set nobackup " no backup files
set nowritebackup " only in case you don't want a backup file while editing
set noswapfile " no swap files

set backspace=indent,eol,start " backspace removes all (indents, EOLs, start) What is start?

set scrolloff=20 " let 10 lines before/after cursor during scroll

set clipboard=unnamed " use system clipboard

set exrc " enable usage of additional .vimrc files from working directory
set secure " prohibit .vimrc files to execute shell, create files, etc...

"set completeopt-=preview
"set completeopt=menu,menuone,noinsert
set completeopt=longest,menuone
"set cul!
set timeoutlen=1000 ttimeoutlen=0
set foldmethod=manual

"=====================================================
"" AirLine settings
"=====================================================
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#formatter='unique_tail'
let g:airline_powerline_fonts=1

"=====================================================
"" Tabs / Buffers settings
"=====================================================
tab sball
set switchbuf=useopen
set laststatus=2
nmap <F9> :bprev<CR>
nmap <F10> :bnext<CR>
nmap <silent> <leader>q :SyntasticCheck # <CR> :bp <BAR> bd #<CR>
vmap <Tab> >
vmap <S-Tab> <

"=====================================================
"" TagBar settings
"=====================================================
let g:tagbar_autofocus=0
let g:tagbar_width=29
nmap <silent> <F4> :TagbarToggle<CR>

"autocmd BufEnter *.py :call tagbar#autoopen(0)
"nmap <F8> :TagbarToggle<CR>
"autocmd BufWinLeave *.py :TagbarClose
"au CompleteDone * pclose
"autocmd BufNew * if &previewwindow | setlocal nobuflisted | endif

"=====================================================
"" NERDTree settings
"=====================================================
let g:NERDTreeChDirMode=2
let g:NERDTreeIgnore=['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__']
let g:NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
let g:NERDTreeShowBookmarks=1
let g:nerdtree_tabs_focus_on_files=1
let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'
let g:NERDTreeWinSize = 30
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite
nnoremap <silent> <F2> :NERDTreeFind<CR>
nnoremap <silent> <F3> :NERDTreeToggle<CR>
autocmd BufWritePost * if !argc() | NERDTreeFocus | execute 'normal R' | wincmd p | endif


"=====================================================
"" DevIcon Settings
"=====================================================
" loading the plugin
let g:webdevicons_enable = 1

" adding the flags to NERDTree
let g:webdevicons_enable_nerdtree = 1

" adding to vim-airline's tabline
let g:webdevicons_enable_airline_tabline = 1

" adding to vim-airline's statusline
let g:webdevicons_enable_airline_statusline = 1

" turn on/off file node glyph decorations (not particularly useful)
let g:WebDevIconsUnicodeDecorateFileNodes = 1

" use double-width(1) or single-width(0) glyphs
" only manipulates padding, has no effect on terminal or set(guifont) font
let g:WebDevIconsUnicodeGlyphDoubleWidth = 1

" whether or not to show the nerdtree brackets around flags
let g:webdevicons_conceal_nerdtree_brackets = 0

" the amount of space to use after the glyph character (default ' ')
let g:WebDevIconsNerdTreeAfterGlyphPadding = ''

" Force extra padding in NERDTree so that the filetype icons line up vertically
let g:WebDevIconsNerdTreeGitPluginForceVAlign =0

" change the default character when no match found
let g:WebDevIconsUnicodeDecorateFileNodesDefaultSymbol = 'ƛ'

" set a byte character marker (BOM) utf-8 symbol when retrieving file encoding
" disabled by default with no value
let g:WebDevIconsUnicodeByteOrderMarkerDefaultSymbol = ''

" enable folder/directory glyph flag (disabled by default with 0)
let g:WebDevIconsUnicodeDecorateFolderNodes = 1

" enable open and close folder/directory glyph flags (disabled by default with 0)
let g:DevIconsEnableFoldersOpenClose = 1

" enable pattern matching glyphs on folder/directory (enabled by default with 1)
let g:DevIconsEnableFolderPatternMatching = 1

" enable file extension pattern matching glyphs on folder/directory (disabled by default with 0)
let g:DevIconsEnableFolderExtensionPatternMatching = 0

"Rust config
let g:rust_clip_command = 'xclip -selection clipboard'

" search settings
set incsearch
set hlsearch

"=====================================================
"" Indent Guides Settings
"=====================================================
set listchars=tab:›\ ,trail:•,extends:#,nbsp:.

"=====================================================
"" Mouse
"=====================================================
"set mouse=nv
"=====================================================
"" C/C++
"=====================================================
autocmd FileType c setlocal tabstop=4 shiftwidth=4 expandtab
autocmd FileType cpp setlocal tabstop=4 shiftwidth=4 expandtab

"=====================================================
"" Jedi
"=====================================================

augroup vimrc-python
  autocmd!
  autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=8 colorcolumn=79
      \ formatoptions+=croq softtabstop=4
      \ cinwords=if,elif,else,for,while,try,except,finally,def,class,with
augroup END

let g:pymode_rope = 0

" jedi-vim
let g:jedi#popup_on_dot = 0
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_definitions_command = "<leader>d"
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>n"
let g:jedi#rename_command = "<leader>r"
let g:jedi#show_call_signatures = "0"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#smart_auto_mappings = 0

" syntastic
let g:syntastic_python_checkers=['python', 'flake8']

" vim-airline
let g:airline#extensions#virtualenv#enabled = 1

" Syntax highlight
" Default highlight is better than polyglot
let g:polyglot_disabled = ['python']
let python_highlight_all = 1

"=====================================================
"" Rainbow Parentheses Autoload·
"=====================================================
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

"=====================================================
"" emmet for vanilla
"=====================================================

let g:user_emmet_mode='n'    "only enable normal mode functions.
let g:user_emmet_mode='inv'  "enable all functions, which is equal to
let g:user_emmet_mode='a'    "enable all function in all mode

let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall


"=====================================================
"" transparency
"=====================================================

set background=dark
hi! Normal ctermbg=NONE guibg=NONE

"=====================================================
"" latex
"=====================================================
let g:quicktex_tex = {
    \' '   : "\<ESC>:call search('<+.*+>')\<CR>\"_c/+>/e\<CR>",
    \'m'   : '\( <+++> \) <++>',
    \'prf' : "\\begin{proof}\<CR><+++>\<CR>\\end{proof}",
\}

let g:quicktex_math = {
    \' '    : "\<ESC>:call search('<+.*+>')\<CR>\"_c/+>/e\<CR>",
    \'fr'   : '\mathcal{R} ',
    \'eq'   : '= ',
    \'set'  : '\{ <+++> \} <++>',
    \'frac' : '\frac{<+++>}{<++>} <++>',
    \'one'  : '1 ',
    \'st'   : ': ',
    \'in'   : '\in ',
    \'bn'   : '\mathbb{N} ',
\}

let g:livepreview_previewer = 'llpp'
let g:Tex_DefaultTargetFormat='pdf'
let g:Tex_CompileRule_pdf = 'pdflatex -shell-escape -interaction=nonstopmode $*'
let g:livepreview_cursorhold_recompile = 0

"=====================================================
"" startify
"=====================================================
let g:startify_custom_header = [
            \ '888                          888      888888b.                            888      d8b          ',
            \ '888                          888      888  "88b                           888      Y8P          ',
            \ '888                          888      888  .88P                           888                   ',
            \ '888      .d88b.  888d888 .d88888      8888888K.  888d888 .d88b.   .d88b.  888  888 888  .d88b.  ',
            \ '888     d88""88b 888P"  d88" 888      888  "Y88b 888P"  d88""88b d88""88b 888 .88P 888 d8P  Y8b ',
            \ '888     888  888 888    888  888      888    888 888    888  888 888  888 888888K  888 88888888 ',
            \ '888     Y88..88P 888    Y88b 888      888   d88P 888    Y88..88P Y88..88P 888 "88b 888 Y8b.     ',
            \ '88888888 "Y88P"  888     "Y88888      8888888P"  888     "Y88P"   "Y88P"  888  888 888  "Y8888  ',
            \ '                                                                                                ',
            \ '                                                                                                ',
            \ '                                                                                                ',
            \ '                  El éxito llega cuándo tus sueños son más grandes que tus excusas.',
\]
